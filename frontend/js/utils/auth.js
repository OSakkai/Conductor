// AUTH MANAGER - CONDUCTOR
// Sistema de autentica√ß√£o e autoriza√ß√£o corrigido e otimizado

class AuthManager {
    constructor() {
        // Verificar se ConductorAPI est√° dispon√≠vel
        if (!window.conductorAPI) {
            console.error('‚ùå ConductorAPI n√£o encontrado! AuthManager n√£o pode ser inicializado.');
            return;
        }
        
        this.api = window.conductorAPI;
        this.redirectAfterLogin = 'dashboard.html';
        this.currentUser = null;
        
        // Carregar usu√°rio do localStorage
        this.loadUserFromStorage();
        
        console.log('‚úÖ AuthManager inicializado');
    }

    // ===============================================
    // VERIFICA√á√ïES DE AUTENTICA√á√ÉO
    // ===============================================

    // Verificar se est√° autenticado
    isAuthenticated() {
        return !!this.api.token && !!this.currentUser;
    }

    // Carregar usu√°rio do localStorage
    loadUserFromStorage() {
        try {
            const userStr = localStorage.getItem('conductor_user');
            if (userStr) {
                this.currentUser = JSON.parse(userStr);
            }
        } catch (error) {
            console.error('‚ùå Erro ao carregar usu√°rio do localStorage:', error);
            this.currentUser = null;
        }
    }

    // Obter usu√°rio atual
    getCurrentUser() {
        return this.currentUser || this.api.getCurrentUser();
    }

    // Verificar autentica√ß√£o em p√°ginas protegidas
    async requireAuth() {
        try {
            // Verificar se tem token
            if (!this.api.isAuthenticated()) {
                console.log('‚ùå N√£o autenticado - redirecionando para login');
                this.redirectToLogin();
                return false;
            }

            // Validar token no servidor
            const validationResult = await this.api.validateToken();
            if (!validationResult) {
                console.log('‚ùå Token inv√°lido - redirecionando para login');
                this.redirectToLogin();
                return false;
            }

            // Atualizar dados do usu√°rio se necess√°rio
            if (validationResult && validationResult.id) {
                this.currentUser = validationResult;
                localStorage.setItem('conductor_user', JSON.stringify(validationResult));
            }

            return true;

        } catch (error) {
            console.error('‚ùå Erro na verifica√ß√£o de autentica√ß√£o:', error);
            this.redirectToLogin();
            return false;
        }
    }

    // ===============================================
    // VERIFICA√á√ïES DE PERMISS√ÉO
    // ===============================================

    // Verificar permiss√µes espec√≠ficas
    async requirePermission(permission) {
        const isAuth = await this.requireAuth();
        if (!isAuth) return false;

        if (!this.hasPermission(permission)) {
            this.showAccessDenied();
            return false;
        }

        return true;
    }

    // Verificar se tem uma permiss√£o espec√≠fica
    hasPermission(requiredPermission) {
        const user = this.getCurrentUser();
        if (!user) {
            console.log('‚ùå Usu√°rio n√£o encontrado para verifica√ß√£o de permiss√£o');
            return false;
        }

        const permissions = ['Visitante', 'Usuario', 'Operador', 'Administrador', 'Desenvolvedor'];
        const userLevel = permissions.indexOf(user.permissao);
        const requiredLevel = permissions.indexOf(requiredPermission);

        if (userLevel === -1) {
            console.warn('‚ö†Ô∏è Permiss√£o de usu√°rio desconhecida:', user.permissao);
            return false;
        }

        if (requiredLevel === -1) {
            console.warn('‚ö†Ô∏è Permiss√£o requerida desconhecida:', requiredPermission);
            return false;
        }

        const hasAccess = userLevel >= requiredLevel;
        console.log(`üîê Verifica√ß√£o de permiss√£o: ${user.permissao} ${hasAccess ? '‚úÖ' : '‚ùå'} ${requiredPermission}`);
        
        return hasAccess;
    }

    // Verificar se √© admin
    async requireAdmin() {
        return this.requirePermission('Administrador');
    }

    // Verificar se √© desenvolvedor
    async requireDeveloper() {
        return this.requirePermission('Desenvolvedor');
    }

    // Verificar se √© operador ou superior
    async requireOperator() {
        return this.requirePermission('Operador');
    }

    // Verificar se √© usu√°rio ou superior
    async requireUser() {
        return this.requirePermission('Usuario');
    }

    // ===============================================
    // NAVEGA√á√ÉO E REDIRECIONAMENTO
    // ===============================================

    // Redirecionar para login
    redirectToLogin() {
        const currentPage = window.location.pathname.split('/').pop();
        if (currentPage !== 'login.html') {
            console.log('üîÑ Redirecionando para p√°gina de login');
            window.location.href = 'login.html';
        }
    }

    // Mostrar acesso negado
    showAccessDenied() {
        const user = this.getCurrentUser();
        const userName = user ? user.username : 'Usu√°rio';
        const userPermission = user ? user.permissao : 'Desconhecida';
        
        alert(`‚ùå ACESSO NEGADO!\n\nUsu√°rio: ${userName}\nPermiss√£o: ${userPermission}\n\nVoc√™ n√£o tem permiss√£o para acessar esta p√°gina.`);
        
        console.log('‚ùå Acesso negado - redirecionando para dashboard');
        window.location.href = 'dashboard.html';
    }

    // Redirecionar ap√≥s login
    redirectAfterAuth() {
        window.location.href = this.redirectAfterLogin;
    }

    // ===============================================
    // PROTE√á√ÉO DE P√ÅGINAS
    // ===============================================

    // Proteger p√°gina atual (fun√ß√£o global para compatibilidade)
    async protectPage(requiredPermission = 'Usuario') {
        return this.requirePermission(requiredPermission);
    }

    // Proteger p√°gina de admin
    async protectAdminPage() {
        return this.requireAdmin();
    }

    // Proteger p√°gina de desenvolvedor
    async protectDeveloperPage() {
        return this.requireDeveloper();
    }

    // ===============================================
    // GEST√ÉO DE SESS√ÉO
    // ===============================================

    // Auto-logout ap√≥s inatividade
    setupAutoLogout(minutes = 60) {
        let inactivityTimer;

        const resetTimer = () => {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(() => {
                console.log('‚è∞ Sess√£o expirada por inatividade');
                alert('Sua sess√£o expirou por inatividade. Voc√™ ser√° redirecionado para o login.');
                this.logout();
            }, minutes * 60 * 1000);
        };

        // Eventos que resetam o timer
        const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
        events.forEach(event => {
            document.addEventListener(event, resetTimer, true);
        });

        resetTimer();
        console.log(`‚è∞ Auto-logout configurado para ${minutes} minutos de inatividade`);
    }

    // Logout do sistema
    logout() {
        console.log('üö™ Realizando logout...');
        
        // Limpar dados locais
        this.currentUser = null;
        
        // Usar m√©todo da API para logout
        this.api.logout();
    }

    // ===============================================
    // UTILIT√ÅRIOS DE USU√ÅRIO
    // ===============================================

    // Formatar nome de exibi√ß√£o
    getDisplayName() {
        const user = this.getCurrentUser();
        if (!user) return 'Usu√°rio';
        
        return user.username || user.email || 'Usu√°rio';
    }

    // Obter avatar/iniciais do usu√°rio
    getUserAvatar() {
        const user = this.getCurrentUser();
        if (!user) return 'üë§';
        
        // Se tiver nome, usar iniciais
        if (user.username) {
            const initials = user.username
                .split(' ')
                .map(name => name.charAt(0).toUpperCase())
                .join('')
                .substring(0, 2);
            return initials;
        }
        
        return 'üë§';
    }

    // Obter cor do badge de permiss√£o
    getPermissionColor() {
        const user = this.getCurrentUser();
        if (!user) return 'gray';
        
        const colors = {
            'Visitante': 'gray',
            'Usuario': 'blue',
            'Operador': 'green',
            'Administrador': 'orange',
            'Desenvolvedor': 'purple'
        };
        
        return colors[user.permissao] || 'gray';
    }

    // Verificar se √© o pr√≥prio usu√°rio
    isOwnProfile(userId) {
        const user = this.getCurrentUser();
        return user && user.id == userId;
    }

    // ===============================================
    // VERIFICA√á√ïES ESPEC√çFICAS
    // ===============================================

    // Verificar se pode gerenciar usu√°rios
    canManageUsers() {
        return this.hasPermission('Administrador');
    }

    // Verificar se pode gerenciar chaves
    canManageKeys() {
        return this.hasPermission('Operador');
    }

    // Verificar se pode ver logs
    canViewLogs() {
        return this.hasPermission('Administrador');
    }

    // Verificar se pode acessar configura√ß√µes do sistema
    canAccessSystemSettings() {
        return this.hasPermission('Desenvolvedor');
    }

    // ===============================================
    // M√âTODOS DE APOIO PARA UI
    // ===============================================

    // Atualizar informa√ß√µes do usu√°rio na UI
    updateUserDisplay() {
        const user = this.getCurrentUser();
        if (!user) return;

        // Atualizar elementos comuns da UI
        const userNameElements = document.querySelectorAll('[data-user-name]');
        const userEmailElements = document.querySelectorAll('[data-user-email]');
        const userPermissionElements = document.querySelectorAll('[data-user-permission]');
        const userAvatarElements = document.querySelectorAll('[data-user-avatar]');

        userNameElements.forEach(el => {
            el.textContent = user.username || 'Usu√°rio';
        });

        userEmailElements.forEach(el => {
            el.textContent = user.email || '';
        });

        userPermissionElements.forEach(el => {
            el.textContent = user.permissao || 'Visitante';
            el.className = `permission-badge permission-${(user.permissao || 'visitante').toLowerCase()}`;
        });

        userAvatarElements.forEach(el => {
            el.textContent = this.getUserAvatar();
        });
    }

    // Mostrar/ocultar elementos baseado em permiss√µes
    applyPermissionBasedVisibility() {
        const user = this.getCurrentUser();
        if (!user) return;

        // Elementos que requerem admin
        const adminElements = document.querySelectorAll('[data-requires="admin"]');
        adminElements.forEach(el => {
            el.style.display = this.hasPermission('Administrador') ? '' : 'none';
        });

        // Elementos que requerem desenvolvedor
        const devElements = document.querySelectorAll('[data-requires="developer"]');
        devElements.forEach(el => {
            el.style.display = this.hasPermission('Desenvolvedor') ? '' : 'none';
        });

        // Elementos que requerem operador
        const operatorElements = document.querySelectorAll('[data-requires="operator"]');
        operatorElements.forEach(el => {
            el.style.display = this.hasPermission('Operador') ? '' : 'none';
        });
    }

    // ===============================================
    // EVENTOS E CALLBACKS
    // ===============================================

    // Registrar callback para mudan√ßas de autentica√ß√£o
    onAuthChange(callback) {
        if (typeof callback === 'function') {
            this.authChangeCallback = callback;
        }
    }

    // Executar callback de mudan√ßa de auth
    triggerAuthChange() {
        if (this.authChangeCallback) {
            this.authChangeCallback(this.getCurrentUser());
        }
    }

    // ===============================================
    // M√âTODOS DE DEBUG
    // ===============================================

    // Debug: Mostrar informa√ß√µes de autentica√ß√£o
    debugAuth() {
        const user = this.getCurrentUser();
        const token = this.api.token;
        
        console.group('üîç Debug - Autentica√ß√£o');
        console.log('Token:', token ? '‚úÖ Presente' : '‚ùå Ausente');
        console.log('Usu√°rio:', user);
        console.log('Autenticado:', this.isAuthenticated());
        
        if (user) {
            console.log('Permiss√µes dispon√≠veis:');
            const permissions = ['Visitante', 'Usuario', 'Operador', 'Administrador', 'Desenvolvedor'];
            permissions.forEach(perm => {
                console.log(`  ${perm}: ${this.hasPermission(perm) ? '‚úÖ' : '‚ùå'}`);
            });
        }
        
        console.groupEnd();
    }

    // Debug: Testar todas as permiss√µes
    debugPermissions() {
        const permissions = ['Visitante', 'Usuario', 'Operador', 'Administrador', 'Desenvolvedor'];
        
        console.group('üîç Debug - Permiss√µes');
        permissions.forEach(permission => {
            const hasAccess = this.hasPermission(permission);
            console.log(`${permission}: ${hasAccess ? '‚úÖ' : '‚ùå'}`);
        });
        console.groupEnd();
    }
}

// ===============================================
// INST√ÇNCIA GLOBAL E FUN√á√ïES DE COMPATIBILIDADE
// ===============================================

// Criar inst√¢ncia global do AuthManager
window.authManager = new AuthManager();

// Fun√ß√µes globais para compatibilidade com c√≥digo existente
window.protectPage = async function(requiredPermission = 'Usuario') {
    if (window.authManager) {
        return window.authManager.protectPage(requiredPermission);
    }
    console.error('‚ùå AuthManager n√£o dispon√≠vel');
    return false;
};

window.requireAuth = async function() {
    if (window.authManager) {
        return window.authManager.requireAuth();
    }
    console.error('‚ùå AuthManager n√£o dispon√≠vel');
    return false;
};

window.requireAdmin = async function() {
    if (window.authManager) {
        return window.authManager.requireAdmin();
    }
    console.error('‚ùå AuthManager n√£o dispon√≠vel');
    return false;
};

window.logout = function() {
    if (window.authManager) {
        window.authManager.logout();
    } else {
        console.error('‚ùå AuthManager n√£o dispon√≠vel');
        // Fallback
        localStorage.clear();
        window.location.href = 'login.html';
    }
};

// Auto-setup quando DOM estiver carregado
document.addEventListener('DOMContentLoaded', () => {
    if (window.authManager) {
        // Atualizar display do usu√°rio
        window.authManager.updateUserDisplay();
        
        // Aplicar visibilidade baseada em permiss√µes
        window.authManager.applyPermissionBasedVisibility();
        
        // Configurar auto-logout (60 minutos)
        window.authManager.setupAutoLogout(60);
        
        console.log('‚úÖ AuthManager configurado e pronto');
    }
});

console.log('‚úÖ AuthManager carregado e dispon√≠vel globalmente');